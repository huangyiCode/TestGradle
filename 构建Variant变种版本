create by huangYi 2015/11/16

创建构建Variant
      开发一个应用的时候通常会有多个版本，比如测试版和手动版，免费版以及具有额外功能的付费版，以及服务器地址
  不相同的版本这种情况下就需要处理多种版本，不同版本的不同配置使项目变得复杂.
      在Gradle中有一些便捷以及可以扩展的概念来定位这些常见的问题，我们每新建一个新的项目，都会生成debug和release
  构建类型.另外一个概念就是product flavor(不同定制的产品),它让管理多个应用和以案例库版本成为可能.product flavor和
  构建类型经常结合在一起使用就很容易的处理测试和生产应用的免费和付费版本，构建类型和product flavor的结合称为构建
  variant

     构建类型
     product flavor
     构建variant
     签名配置

   1.构建类型
      在Gradle的Android插件中，构建类型是用来定义如何构建一个应用或者依赖库，并且每个构建类型都是相互独立的，每一个
    构建类型都是不同的，不管debug标示是否被包含，applicationID是什么，无用的资源是否需要被移除.我们在buildTypes代码块
    中定义构建类型.
       一个标准的buildTypes代码块:
              android{
                 buildTypes{
                     release{
                          minifyEnabled false
                          proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                     }
                 }
              }
         新模块的默认build.gradle文件配置了一个叫做 release(发布)的构建类型，用于禁用清除无用资源，
     定义默认的Proguard(混淆器)

         默认的debug构建类型可以让调试更加容易 当创建自己的构建模式的时候 可以自定义

      A.创建构建类型
         当默认的社会不够用的时候。我们可以创建新的自定义构建类型，只需要在buildTypes中新增加一个对象即可，比如:
             buildTypes{
                   /**
                    * 自定义构建类型
                    */
                     oneBuildTypr{
                         //再次对applicationId进行了拼接,也就是说不同的构建类型，他们的唯一标识不同，
                         //唯一标识不同意味着他们可以再同业个设备上安装多种构建类型的应用
                          applicationIdSuffix ".oneType"   //修改了applicationId
                          versionNameSuffix   "-oneType"   //修改了版本名称
                          //其他
                          resValue "string", "app_namea", "第一测试版本"
                      }
             }

          在创建一个新的构建类型时还可义通过另一个构建类型的属性对其机芯初始化
                     buildTypes{
                         oneBuildTypr.initWith(buildTypes.debug)
                         oneBuildTypr{

                         }
                     }
             initWith方法创建了一个新的构建类型，并复制了一个已经存在的构建类型所有属性到新的构建类型中，在新的
         构建类型中可以对他们进行覆盖或者扩展

             定义不同的构建方式 不同的构建方式所打的包更具所定义的差异差生的包是不同的,并且由于applicationID不同
          不同的包是可以运行在同一设备的
      B.源集
      C:依赖
          每种构建类型都可以有自己的依赖，Gradle自动为每个构建类型创建新的依赖配置，如果只想在Debug构建中添加一个logging
        框架，那么可以这么做:
           dependencies{
               twoBuildTyprCompile 'com.alibaba:fastjson:1.2.7'
           }
           注意:这种方式给构建方式添加特定的依赖，回到只在其他的构建方式构建中会无法使用此依赖
                比如:当前这种特定依赖的方式，fastjson只能在twoBuildTypr构建方式下才能使用此依赖
                      打包也是一样
            测试:可以在左边工具窗口(Build Variants)中修改默认的build类型 查看BuildConfig来查看各个
                 构建类型的不同输出

    2.product flavor(不同定制产品)
          product flavor只是用来被创建不同版本，比如:你的应用存在免费版以及付费版，或者为客户端构建相同功能但是品牌不同的应用，
      多渠道打包，比如:你需要爱不同的平台上发布你的应用用来做不同的活动，product flavor简化了基于相同代码构建多个版本的应用进程

       A:创建product flavor 可以用于多渠道打包  (在项目 choosepic中进行测试)
            创建product flavor和构建方式类似.在android代码块下添加productFlavor代码块在其中添加新的product flavor来创建
               android{
                //添加不同的定制产品
                 productFlavor{
                   free{//免费版
                       applicationId 'xxxxxxxx.free'
                        versionCode 3
                    }
                    charge{//付费版
                        applicationId 'xxxxxxxx.charge'
                        minSdkVersion 14
                        versionCode 6
                      }
                 }
               }
             这种方式我们的项目就存在多种不同的产品 多渠道打包也是使用同样的方式(多渠道打包主要还是看各个平台的要求 在此不作讲解)
       B:多种定制的版本
             某些情况下，我们需要创建product flavor的结合体，比如:客户A和客户B都想要免费版和付费版，并且时基于相同的代码不同的品牌，
         这就意味着我们需要创建四种不同的flaovr意味着需要与多个拷贝，我们有更好的办法去做这件事,使用flavor维度时结合flavor:
            android{
              productFlavors{
                  //定义了维度(Dimensions)数组
                  flavorDimensions "color","price"
                  red{
                     flavorDimension "color"
                  }
                  blue{
                     flavorDimension "color"
                  }
                  free{
                     flavorDimension "price"
                  }
                  charge{
                     flavorDimension "price"
                  }
              }
            }
            注意:当我们添加了维度数组之后，需要给每个flavor都要添加爱维度，否则会构建错误

               当我们使用维度的方式最终就会生成多种构建Variant：(只有默认的梁红构建方式(debug,release))
                    blueFreeDebug 和 blueFreeRelease
                    blueChargeDebug 和 blueChargeRelease
                    redFreeDebug 和 redFreeRelease
                    redChargeDebug 和 redChargeRelease
               提示:具体查看 本工程中的项目依赖
       C:查看Build Variants
             在AndroidStudio的Build Variants  窗口中进行查看Variants   如果不存在productFlavors则只会看到构建类型
          如果找不到Build Variants View--->Tool Windows ---->Build Variants  并且在其中可以切换构建variants，此切换
          会影响项目的Build方式 以及运行呈现所使用的构建方式

        运行本项目中的testvariant Model 使用不同的构建方式 你可以看到产生的差异

       D:variant过滤器
          我们可以灾构建过程中完全忽略某一个variant,并且与其相关的任务也会进行取消 ，在此不做讲解

    3.签名配置

          在我们发布和打包应用的时候都必须要对应用进行签名配置，Android插件使用了一个通用的keyStore和一个已知的密码(android)
      自动创建了debug配置，在运行程序到手机的时候默认是将debug构建方式产生的安装包安装到了手机，但是当我们将构建方式切换到了
      release构建方式运行时，会提示应用没有签名信息，无法运行，因为release方式没有默认的签名配置，所有当我们使用出国debug方式
      的其他构建方式运行时，都是需要额外进行签名配置

        提示:默认debug构建方式产生的apk是在 当前应用Model的build/outputs/apk/中

        如何进行签名配置:
         1.进行签名配置
               android{
                  signingConfigs{
                     /**
                       * 自定义构建方式  initWith();会从另外一个签名配置中复制所有的签名属性
                       *  此处自定义了一个签名配置--->从debug默认签名配置中进行了拷贝
                       */
                          mySign.initWith(signingConfigs.debug)
                     release{
                          storeFile file("release.keystore(默认的目录为当前model的根目录)")
                          storePassword"keystore文件的密码(生成keystore文件时指定)"
                          keyAlias "应用的别名(生成keystore文件时指定 一个keystore中可以有多个签名信息)"
                          keyPassword "此应用的私有密码((生成keystore文件时指定 每个签名别名对应的密码))"
                     }
                  }
              }
         2.给release构建方式或者其他构建方式配置签名
             buildTypes{
                 release{
                 //引用签名配置中的release配置
                  signingConfig signingConfigs.release
                 }
                 /**
                  * 自定义的构建类型  如果需要使用此类型的构建方式进行打包则需要进行签名配置
                  */
                  myType{
                  /**
                   *     引用了自定义签名配置 signingConfig 否则使用此构建方式运行程序 会因为没有见面配置导致
                   * 无法签名APK 导致无法打包运行
                   */
                      signingConfig signingConfigs.mySign
                         }
             }
         3.同样当我们自定义了signingConfig(签名配置)我们可以将自定义的签名配置使用到构建类型以及flavor
           中:
              productFlavors{
                 blue{
                 /**
                  *     注意:我们知道最终构建方式会和flavor进行组合 当我们构建方式中定义了签名配置并且在
                  *flavors中同样也配置了签名配置(就像2和3同时使用) 那么flavors中的签名配置会覆盖构建类型
                  *中的签名配置，但是这中方式并不能为每一个flavor添加不同的签名配置，这种情况下我们往下看
                  */
                   signingConfig signingConfigs.release
                 }
                 red{
                   signingConfig signingConfigs.debug
                 }
              }
         4.为每个falvo添加不同的签名配置  需要在构建类型中对每个flavor中添加不同的签名配置 比如:
             android{
                   buildTypes{
                       release{
                         prodectFlavors.red.signingConfig.signingConfigs.release
                         prodectFlavors.red.signingConfig.signingConfigs.debug
                       }
                   }
             }

          此时你就可以以release构建类型以及myType构建类型去进行应用的打包

          提示:Android Studio打包方式
                1.点击Build------>Generate Signed APK
                   在弹出的对话框中
                   KeyStore path：keyStore(jks)文件的路径
                        1.可以使用安卓默认的debug.keystore(windows-->C:\Users\Administrator\.android)
                              keyStorePassword     keystore文件的密码默认为android
                              key alias            key的别名  (寻找对应的key)-->也可以创建新的一个keystore
                                                                                 中可以有多个key
                              key password         key的密码  (配合别名的密码)
                        2.选择现成的keyStore文件 需要知道上述信息
                        3.自己生成新的keystore文件 createNew
                            注意:certficate(证书)的信息必须要至少填一个
                 2.下一步
                          1.选择生成apk的位置
                          2.生成apk的build type(构建方式(默认release和debug方式))
                          3.Flavors(参考本全文) 生成多种定制产品(多渠道打包)




